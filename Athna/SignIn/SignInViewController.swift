//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.6
//
//

import UIKit
import AWSMobileHubHelper
import FBSDKLoginKit
import AWSCognitoIdentityProvider

class SignInViewController: UIViewController {
    @IBOutlet weak var anchorView: UIView!

    @IBOutlet weak var facebookButton: UIButton!

// Support code for Google provider UI.
    @IBOutlet weak var googleButton: UIButton!

    @IBOutlet weak var customProviderButton: UIButton!
    @IBOutlet weak var customCreateAccountButton: UIButton!
    @IBOutlet weak var customForgotPasswordButton: UIButton!
    @IBOutlet weak var customUserIdField: UITextField!
    @IBOutlet weak var customPasswordField: UITextField!
    @IBOutlet weak var leftHorizontalBar: UIView!
    @IBOutlet weak var rightHorizontalBar: UIView!
    @IBOutlet weak var orSignInWithLabel: UIView!
    
    var didSignInObserver: AnyObject!
    
    //var passwordAuthenticationCompletion: AWSTaskCompletionSource<AnyObject>?
    var passwordAuthenticationCompletion: AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails>?
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("Sign In Loading.")
        
        
        didSignInObserver =  NotificationCenter.default.addObserver(forName: NSNotification.Name.AWSIdentityManagerDidSignIn,
            object: AWSIdentityManager.defaultIdentityManager(),
            queue: OperationQueue.main,
            using: {(note: Notification) -> Void in
            // perform successful login actions here
                print("SignInVC======Sign In Observer observed sign in.==========")
            })

        // Facebook login permissions can be optionally set, but must be set
        // before user authenticates.
        AWSFacebookSignInProvider.sharedInstance().setPermissions(["public_profile"]);
                
        // Facebook login behavior can be optionally set, but must be set
        // before user authenticates.
        AWSFacebookSignInProvider.sharedInstance().setLoginBehavior(FBSDKLoginBehavior.browser.rawValue)
        
                
        // Facebook UI Setup
        facebookButton.addTarget(self, action: #selector(SignInViewController.handleFacebookLogin), for: .touchUpInside)
        let facebookButtonImage: UIImage? = UIImage(named: "FacebookButton")
        if let facebookButtonImage = facebookButtonImage{
            facebookButton.setImage(facebookButtonImage, for: UIControlState())
        } else {
            print("Facebook button image unavailable. We're hiding this button.")
            facebookButton.isHidden = true
        }
        view.addConstraint(NSLayoutConstraint(item: facebookButton, attribute: .top, relatedBy: .equal, toItem:anchorViewForFacebook(), attribute: .bottom, multiplier: 1, constant: 8.0))
        googleButton.removeFromSuperview()
        
        // Custom UI Setup
        customProviderButton.addTarget(self, action: Selector(("handleCustomSignIn")), for: .touchUpInside)
        customCreateAccountButton.addTarget(self, action: Selector(("handleUserPoolSignUp")), for: .touchUpInside)
        customForgotPasswordButton.addTarget(self, action: Selector(("handleUserPoolForgotPassword")), for: .touchUpInside)
        customProviderButton.setImage(UIImage(named: "LoginButton"), for: UIControlState())
    }
    
    deinit {
        NotificationCenter.default.removeObserver(didSignInObserver)
    }
    
    // MARK: - Utility Methods
    
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        print("signInProvider=\(signInProvider)")
        AWSIdentityManager.defaultIdentityManager().loginWithSign(signInProvider, completionHandler: {(result: Any?, error: Error?) -> Void in
            // If no error reported by SignInProvider, discard the sign-in view controller.
            if error == nil {
                DispatchQueue.main.async(execute: {
                    self.presentingViewController?.dismiss(animated: false, completion: nil)
                    //self.dismiss(animated: true, completion: nil)
                    
                })
            }
            print("result = \(result), error = \(error)")
        })
        
    }

    func handleFacebookLogin() {
        self.handleLoginWithSignInProvider(AWSFacebookSignInProvider.sharedInstance())
    }
    
    func anchorViewForFacebook() -> UIView {
            return orSignInWithLabel
    }
    
}
